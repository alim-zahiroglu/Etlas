## AWS Image CI
## This workflow is triggered on pushes to the 'test' and 'main1' branches, as well as pull requests targeting the 'main' branch.
#on:
#  push:
#    branches: ["main"]
#  pull_request:
#    branches: ["main"]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      # Check out the repository
#      - uses: actions/checkout@v3
#
#      # Build the Docker image
#      - name: Build the Docker image
#        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/etlas:latest
#
#      # Log in to Amazon ECR
#      - name: Login to Amazon ECR
#        run: |
#          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 714140379706.dkr.ecr.eu-central-1.amazonaws.com
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      # Push Docker Image to Amazon ECR
#      - name: Push Docker Image to Amazon ECR
#        run: |
#          docker tag ${{ secrets.DOCKER_USERNAME }}/etlas:latest 714140379706.dkr.ecr.eu-central-1.amazonaws.com/etlas:latest
#          docker push 471112605556.dkr.ecr.eu-central-1.amazonaws.com/etlas:latest
#
#      # Deployment to EC2 instance
#      - name: Deploy to EC2
#        env:
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#          EC2_USERNAME: ubuntu
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#        run: |
#          echo "$SSH_PRIVATE_KEY" > ssh_key.pem
#          chmod 600 ssh_key.pem
#          scp -o StrictHostKeyChecking=no -i ssh_key.pem bin/deploy_command.sh $EC2_USERNAME@$EC2_HOST:/home/ubuntu/deploy_command.sh
#          ssh -o StrictHostKeyChecking=no -i ssh_key.pem $EC2_USERNAME@$EC2_HOST '/bin/bash /home/ubuntu/deploy_command.sh'
#        shell: /usr/bin/bash -e {0}
